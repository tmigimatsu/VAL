#line 2 "pddl+.lex.yy.h"

#line 4 "pddl+.lex.yy.h"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file; 

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[799] =
    {   0,
      122,  122,  125,  124,  119,  121,  124,    1,    2,  102,
      100,  101,  110,  103,  122,  109,  124,  106,   69,  104,
      108,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,    3,    4,  118,  119,   77,
      122,  123,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  120,  107,  105,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   57,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  123,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  118,  118,   56,  118,    0,    0,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,   61,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  118,  118,  118,
        0,  117,    0,    0,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   99,  118,
      118,  118,  118,  118,  118,  118,  118,   62,  118,   80,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
       67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
        0,    0,    0,  113,   97,  118,  118,  117,    0,    0,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   60,

      118,  118,  118,  118,  118,    0,  118,  118,  118,  118,
      118,  118,  118,    0,  112,   26,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   39,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   27,    0,    0,   88,   86,
      117,   48,    0,  118,  118,   35,   36,  118,   63,   58,
       59,  118,  118,  118,  118,  118,  118,   81,    0,  118,
      118,  118,  118,  118,  118,   90,   37,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   65,    0,   50,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   70,   73,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   71,    0,    7,    0,    0,    9,    0,  118,
        0,  118,  118,  118,  118,  118,  118,  118,  118,  118,
        0,  118,   64,  118,  118,  118,  118,  118,    0,   25,
        0,    0,    0,  114,    0,   55,   41,    0,    0,    0,
        0,    0,    0,    0,    0,   15,    0,  115,    0,    0,
      111,    0,    0,    0,   66,    0,    0,    0,    0,    0,
       38,    0,    0,    0,    0,    0,    0,  118,   47,  118,
       83,   78,  118,  118,   82,  118,   75,   74,   49,  118,

      118,   84,   89,  118,  118,    0,    0,    0,    0,    0,
        0,    0,    0,   54,    0,    0,    6,    0,    0,    0,
        0,    0,    0,    0,    0,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,    0,   44,   22,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  118,  118,   96,  118,  118,
       87,   85,  118,  118,  118,   79,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   42,    0,   23,    0,    0,    0,    0,    0,
        0,    0,  118,  118,   95,   76,  118,  118,  118,    0,
        0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,  118,   91,  118,  118,  118,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   52,    0,
        0,    0,    0,   43,    0,    5,    0,    0,    0,    0,
       94,  118,  118,   98,    0,    0,    0,    0,  116,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
        0,    0,   92,  118,    0,    0,    0,    0,    0,    0,

        0,    0,   51,    0,    0,   17,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,   40,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       28,   46,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       30,   32,    0,    0,    0,    0,    0,   45,    0,    0,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   29,    0,    0,    0,
        0,    0,    0,    0,   31,    0,   33,    0,    0,    0,
        0,   12,    0,    0,   13,   10,   11,    0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_uint16_t yy_base[802] =
    {   0,
        0,   34,  795, 1925,   72, 1925,   36, 1925, 1925, 1925,
     1925,  762, 1925, 1925,   66,   83,  753,  725, 1925,  720,
     1925,  142,   68,  144,   70,  143,  148,  153,  204,  149,
      193,  161,  209,  210,  223, 1925, 1925,  228,   80, 1925,
       74,  638,  204,  206,  241,  247,  263,   67,  253,   73,
      253,  271,   78,  272,   98,   80,  292,  278,  127,  144,
      610, 1925, 1925, 1925,    0,   76,  286,  291,  314,  316,
      337,  351,  330,  332,  343,  338,  358,  357,  166,  362,
       78,  364,  370,  387,  377,  389,   80,  400,  401,  407,
      413,  180,  418,  423,  419,  427,  594,  133,  163,  207,

      225,  206,  291,  340,  347,  354,  293,  312,  398,  333,
      411,  408,  402,  411,  429,  416,  432,  421,  417,  438,
      437,  434,  435,  433,  456,  454,  440,  442,  462,  452,
      462,  460,  468,  461,  491,  499,   82,  503,  525,  526,
      473,  524,  538,  532,  536,  531,  544,  550,  552,  558,
      559,  499,  564,  577,  587,  510,  589,  591,  604,  605,
      609,  611,  617,  621,  632,  633,  634,  525, 1925,  545,
      547,  633,  527,  579,  605,  628,  625,  585,  630,  599,
      599,  641,  638,  644,  637,  639,  634,  654,  649,  643,
      641,  662,  659,  661,  667,  694,  671,  658,  656,  673,

      667,  677,  674,  682,  696,  671,  676,  712,  717,  725,
      580,   83,  693,  689,  698,  730,  747,  753,  752,  754,
      758,  759,  563,  760,  774,  718,  773,  779,  783,  789,
      790,  806,  802,  810,  812,  826,  830,  832,  836,  834,
      716,  726,  763,  799,  769,  835,  769,  781,  824,  790,
      831,  815,  835,  828,  829,  838,  837,  832, 1925,  826,
      845,  838,  837,  851,  852,  846,  849,  867,  873,  866,
      862,  882,  884,  872,  881,  894,  877,  884,  889,  898,
      885,  891,  901, 1925,  916,  920,  931,  520,  905,  915,
      901,  935,  944,  949,  959,  957,  961,  966,  955,  967,

      980,  927,  976,  982,  971,  953,  992, 1001, 1003, 1009,
     1007, 1017, 1021,  979, 1925,  994,  984, 1020,  990, 1003,
     1008, 1019, 1012, 1014, 1020, 1013, 1018, 1021, 1925, 1034,
      508, 1022, 1031, 1038, 1044, 1038, 1040, 1048, 1049, 1047,
     1052, 1044, 1054, 1065, 1058, 1071, 1059, 1059, 1071, 1065,
     1073,  501, 1067, 1062,  497, 1925, 1074, 1070, 1031, 1101,
      437, 1925, 1072, 1074, 1106, 1112, 1125, 1129, 1133, 1135,
     1137, 1101, 1090, 1139, 1106, 1143, 1148, 1149, 1110, 1156,
     1157, 1132, 1163, 1165, 1121, 1169,  398, 1127, 1146, 1151,
     1161, 1146, 1146, 1160, 1173, 1175,  388, 1160, 1925, 1174,

     1161, 1170, 1181, 1169, 1176, 1176, 1186, 1199, 1925, 1925,
     1185, 1188, 1209, 1222, 1211, 1199, 1213, 1219, 1216, 1204,
     1218, 1221, 1925, 1213, 1925,  383, 1218, 1925, 1211, 1209,
     1213,  382, 1248, 1244, 1214, 1218, 1271, 1242, 1273, 1275,
     1235, 1279, 1281, 1267, 1267, 1293, 1247, 1268, 1283, 1925,
     1273, 1269, 1281, 1925, 1277, 1925,  376, 1274, 1294, 1283,
     1294, 1297, 1277, 1283, 1301, 1925, 1297, 1925,  288, 1298,
     1925, 1308,  272, 1311, 1925, 1310, 1320, 1322, 1313, 1320,
     1925, 1327, 1327, 1324, 1333, 1329, 1343, 1337, 1925, 1333,
     1356, 1360, 1347, 1346, 1372, 1337, 1377, 1382, 1925, 1387,

     1335,    0, 1388, 1372, 1349, 1371, 1373, 1369, 1378, 1372,
     1378, 1386, 1373,  258,  248, 1383, 1925, 1390, 1394, 1383,
     1398, 1386,  243, 1398, 1395, 1925, 1390, 1389, 1405, 1408,
     1407, 1411, 1412, 1417, 1417, 1418, 1417, 1427, 1424, 1429,
     1441, 1457, 1435, 1451, 1442, 1442, 1437, 1457, 1925, 1440,
     1442, 1447, 1444, 1454, 1458, 1470, 1459, 1476, 1473, 1925,
     1473, 1925, 1468, 1473, 1468, 1475, 1487, 1479, 1496, 1498,
     1490, 1505, 1497, 1493,  238, 1506, 1512,    0, 1510, 1514,
     1528,    0, 1514, 1518, 1525,    0, 1508, 1520, 1514,  236,
     1529, 1530, 1523, 1525, 1538, 1540, 1535, 1546, 1544, 1534,

     1532, 1551, 1925, 1543, 1925, 1542,  219, 1544, 1552, 1567,
     1561, 1557, 1562, 1570,    0,    0, 1561, 1570, 1568, 1564,
      178, 1925, 1581, 1583,  160, 1576, 1585, 1572, 1584,  120,
     1575, 1592, 1596, 1597, 1591, 1592, 1925, 1591, 1592, 1598,
     1599, 1616, 1602, 1609,    0, 1619, 1611, 1623, 1925, 1623,
     1625, 1626, 1621, 1622, 1625, 1634, 1626, 1632, 1925, 1641,
     1646, 1637, 1634, 1925, 1639, 1925, 1654, 1656, 1650, 1660,
        0, 1649, 1652,    0, 1668, 1670, 1676, 1664, 1925, 1662,
     1670, 1671, 1669, 1670, 1676, 1672, 1676, 1691, 1689, 1925,
      119, 1696,    0, 1695, 1695, 1698, 1704, 1701, 1710, 1699,

     1700, 1711, 1925, 1706, 1702, 1925, 1720, 1705, 1718, 1717,
        0, 1730, 1733, 1718, 1738, 1731, 1726, 1732, 1746, 1746,
     1925, 1738, 1745, 1746, 1744, 1753, 1740, 1756, 1751, 1753,
     1925, 1925, 1752, 1759, 1757, 1759, 1755, 1772, 1759, 1762,
     1767, 1774, 1771, 1778, 1775, 1793, 1785, 1795, 1794, 1786,
     1925, 1925, 1803, 1800, 1806, 1802, 1803, 1925, 1796, 1796,
     1925, 1808, 1815, 1812, 1808, 1804, 1826, 1820, 1813, 1815,
     1816, 1828, 1821, 1832, 1831, 1838, 1925, 1843, 1835, 1841,
     1840, 1848, 1849, 1850, 1925, 1852, 1925, 1848, 1854, 1856,
     1853, 1925, 1855, 1857, 1925, 1925, 1925, 1925, 1922,  110,

      108
    } ;

static yyconst flex_int16_t yy_def[802] =
    {   0,
      798,    1,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  799,  798,  798,  798,
      798,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  798,  798,  800,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      799,  798,  798,  798,  801,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  800,  800,  800,  800,  798,  798,
      801,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  801,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  800,  800,  800,
      798,  798,  798,  798,  801,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  801,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  800,  800,  800,  798,  798,  798,
      801,  800,  800,  800,  800,  800,  800,  800,  801,  800,

      800,  801,  800,  800,  800,  798,  800,  800,  800,  800,
      800,  800,  800,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  800,  800,
      798,  798,  798,  801,  800,  800,  800,  800,  800,  800,
      800,  801,  801,  800,  801,  800,  800,  800,  798,  800,
      800,  801,  800,  800,  801,  800,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  801,
      798,  801,  800,  800,  801,  801,  800,  801,  800,  800,
      798,  800,  800,  801,  801,  800,  801,  801,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  801,  798,  801,
      800,  800,  801,  801,  800,  801,  800,  800,  798,  800,

      801,  801,  800,  801,  801,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  801,  801,  801,  801,
      801,  800,  801,  801,  801,  801,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  801,  801,  801,  801,  801,
      800,  801,  801,  801,  801,  801,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  801,  801,  801,  801,  801,  801,  801,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  801,  801,  801,  801,  801,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      801,  801,  801,  801,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  801,  801,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      801,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,    0,  798,  798,

      798
    } ;

static yyconst flex_uint16_t yy_nxt[1998] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   24,   25,   26,   23,   27,   28,   23,   23,
       23,   29,   30,   31,   32,   23,   23,   33,   34,   23,
       23,   35,   23,   23,   23,   36,   37,   22,   23,   23,
       24,   25,   26,   23,   27,   28,   23,   23,   29,   30,
       31,   32,   23,   23,   33,   34,   23,   23,   35,   23,
       23,   23,   38,   39,   40,   39,   42,   65,   41,   65,
       65,   39,   65,   39,   42,   65,   41,  152,   65,   65,
       65,   65,   65,  288,   65,  212,  118,   75,  123,   38,

      115,   40,   43,  127,   44,   45,   46,   47,   48,   65,
       49,   66,   76,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,  118,   75,  123,  115,  709,  658,
       43,  127,   44,   45,   46,   47,   48,  126,   49,   76,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   65,   65,   65,   65,   65,   65,   65,   65,  133,
       65,   65,   65,  134,  126,   65,   67,   72,   84,  653,
       65,  168,   68,   65,   69,   65,   77,   73,   65,   70,
       71,   78,   85,   74,   79,   80,  133,  650,   86,   65,
       81,  134,   65,  169,   67,   72,   84,   89,  168,   68,

      150,   69,   65,   77,   73,   65,   70,   71,   78,   85,
       74,   79,   80,   65,  163,   86,   65,   81,   65,   65,
      169,   65,   65,   82,   89,   98,   99,  150,  638,   87,
       90,   83,   65,   88,  170,   65,  101,   65,  172,  102,
       65,  163,   91,   93,  171,  623,  100,  612,   92,   94,
       95,   82,  563,   98,   99,   96,   87,  556,   90,   83,
       88,   93,  170,  101,  103,  172,  102,  555,  104,   91,
       93,  107,  171,  100,  105,   92,  119,   94,   95,  108,
      106,  524,  109,   96,  116,  117,  120,  110,   93,  111,
      112,  124,  103,  113,  121,   65,  104,  521,   65,  107,

       65,  105,  114,   65,  119,  131,  108,  106,  125,  109,
      122,  116,  117,  120,  110,  128,  111,  177,  112,  124,
      113,  132,  121,   65,  135,   65,   65,  173,   65,  114,
      129,  130,  136,  131,  178,  125,  137,  122,  139,   65,
      140,   65,   65,  128,   65,  177,  141,   65,  132,   65,
       65,  135,   65,  138,  173,   65,  180,  129,  130,  136,
       65,  144,  178,   65,  137,  147,   65,   65,  145,   65,
       65,   65,  142,   65,   65,  143,   65,  174,  175,   65,
      138,  146,   65,  151,  180,  511,   65,  149,  144,   65,
      176,  490,  485,  147,  148,  145,   65,  459,   65,   65,

      142,   65,  154,  143,  174,  175,  153,  449,  146,   65,
       65,  151,   65,   65,  149,  156,   65,  176,  155,   65,
      157,  148,   65,  158,  159,   65,  161,   65,   65,  154,
       65,   65,   65,  153,  160,   65,   65,  179,  181,   65,
      182,  183,  156,  184,  162,  155,  165,  157,  185,  361,
      186,  158,  159,  189,  161,  190,  164,  166,  167,  187,
      191,  160,  192,  194,  179,  193,  181,  182,  183,  195,
      184,  162,  188,  198,  165,  199,  185,  186,  200,  196,
      189,  201,  190,  164,  166,  167,  203,  187,  191,  197,
      192,  194,  193,  204,  205,  206,  195,  207,  202,  188,

       65,  198,  199,   65,  215,  200,  427,  196,   65,  201,
      424,   65,   65,  203,  208,   65,  197,  403,  209,   65,
      204,  205,   65,  206,  207,  202,  139,  139,  139,  139,
      210,  215,  361,   65,  211,  211,   65,  212,  212,  226,
       65,   65,  208,   65,   65,   65,  209,   65,   65,  213,
       65,  218,  241,   65,  247,  219,   65,  220,  210,   65,
      216,   65,   65,  214,   65,  217,  226,   65,   65,  222,
       65,   65,  299,   65,  223,   65,   65,  213,  242,  218,
      241,  221,  247,  219,  243,  220,   65,  216,  224,   65,
      214,  227,  212,  217,  252,  225,   65,  222,   65,   65,

       65,   65,  223,   65,  228,  242,   97,  248,  221,  230,
      229,  243,   62,   65,   65,  224,   65,   65,   65,  227,
       65,   65,  225,   65,  249,  233,   65,  231,  232,   65,
       65,  254,  228,   65,  235,  248,  255,  230,  229,  234,
      237,   65,   65,   65,   65,   65,   65,  250,  251,  253,
       97,  236,  249,  233,  231,  244,  232,  240,  254,  239,
      256,  257,  235,  255,  238,  258,  234,  259,  237,  260,
      245,  246,  261,  262,  263,  250,  251,  253,  236,  264,
      265,  266,  267,  244,  268,  240,  269,  239,  256,  257,
      274,  238,  273,  258,  259,  275,  260,  245,  246,  261,

      276,  262,  263,  277,  278,  280,  264,  265,  279,  266,
      267,  283,  268,  284,  269,  270,  271,  274,  272,  281,
      273,   65,  275,  282,   65,  289,   65,  290,  276,   65,
      277,  291,  278,  280,   65,  279,   64,   65,  283,   65,
      284,   63,   65,  270,  271,  302,  272,  281,  285,  314,
      287,  282,  289,  292,  290,   62,   65,  315,  291,   65,
      286,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  302,   41,  285,  314,  296,  287,  293,
      294,  292,   65,   65,  315,   65,   65,  286,   65,  298,
      295,   65,   65,  306,  798,   65,  297,  301,   65,   65,

      316,   65,   65,  300,  303,  296,  293,  318,  294,  322,
      304,   65,  305,  798,   65,   65,  298,  295,   65,   65,
      323,   65,   65,  297,   65,  301,  317,  316,  325,  307,
      300,  303,  308,  309,  318,   65,  322,  304,   65,   65,
      305,   65,   65,   65,   65,   65,   65,  323,   65,  327,
      310,  324,  326,  334,  317,  325,  311,  307,  319,  308,
      312,  309,  320,  313,  798,  328,  329,  330,  331,  332,
      333,  321,  335,  798,  336,  337,  327,  310,  338,  324,
      326,  334,  339,  311,  340,  341,  319,  312,  342,  346,
      320,  313,  328,  329,  330,  331,  332,  333,  321,  345,

      335,  336,  337,  343,  344,  347,  338,  348,  350,  339,
      349,  340,  341,  351,  798,  352,  342,  346,  353,  354,
      355,  798,  356,  357,  358,   65,  345,  362,   65,   65,
      343,  344,   65,  347,  363,  348,  350,  349,  364,  798,
       65,  351,  352,   65,   65,  353,  354,   65,  355,  356,
      357,  798,  358,   65,  365,  362,   65,  359,   65,  798,
      375,   65,  363,  360,  798,  364,   65,  366,   65,   65,
       65,   65,  379,   65,  372,   65,   65,  373,   65,   65,
       65,  367,  365,   65,  359,   65,  368,  375,   65,   65,
      360,   65,   65,  369,   65,  366,  371,  798,  370,  374,

      379,   65,  372,  376,   65,  373,  798,  378,  367,  377,
       65,  387,  382,   65,  368,   65,   65,  388,   65,   65,
      369,   65,  389,  371,  381,  370,  385,  374,  380,   65,
       65,  376,  392,   65,  378,  393,  383,  377,  387,  390,
      430,  394,  395,   65,  396,  388,  397,  398,  401,  389,
      384,  399,  381,  386,  400,  380,  391,  402,  405,  392,
      404,  406,  393,  407,  383,  408,  409,  390,  394,  410,
      395,  396,  411,  397,  412,  398,  401,  384,  399,  413,
      386,  400,  414,  391,  415,  402,  405,  404,  416,  406,
      417,  407,  418,  408,  409,  419,  420,  410,  421,  428,

      411,  422,  412,  423,  425,  426,  429,  413,  431,  414,
       65,  415,  432,   65,  798,   65,  416,  417,   65,  798,
      418,   65,  419,  420,   65,  435,  421,  428,  422,  436,
      423,  425,  426,  429,   65,  431,  438,   65,   65,  432,
      441,   65,   65,  433,   65,   65,   65,   65,   65,   65,
      798,   65,   65,  435,  444,   65,  436,   65,   65,  448,
       65,   65,  434,  438,  450,   65,   65,  441,   65,   65,
      433,  445,   65,  451,  447,   65,  437,   65,   65,  442,
      453,   65,  444,  452,  454,  455,  448,  439,  443,  434,
      456,  450,  440,  460,  446,  457,  458,  462,  445,  463,

      461,  451,  464,  437,  465,  798,  466,  442,  453,  467,
      452,  454,  455,  468,  439,  443,  469,  456,  470,  440,
      460,  446,  471,  457,  458,  462,  463,  461,  472,  464,
      473,  474,  465,  466,  476,  478,  467,  477,  479,  480,
      468,  481,  482,  469,  483,  486,  470,  484,  487,  471,
      488,  489,  493,   65,  494,  472,   65,   65,  473,  475,
       65,  496,  476,  478,  477,  499,  479,  480,  481,  504,
      482,  491,  483,  486,  484,  487,  492,  488,  489,  493,
       65,  494,   65,   65,   65,   65,  475,   65,   65,  496,
       65,   65,  499,   65,  495,  505,  497,  504,  498,  491,

      501,  502,   65,  492,  506,   65,  507,  508,  509,  798,
      510,  500,  512,  513,  798,  514,  503,  515,  516,  798,
      517,  518,  495,  505,  497,  519,  498,  501,  502,  520,
      522,  523,  506,  507,  508,  525,  509,  510,  500,  512,
      526,  513,  514,  527,  503,  515,  516,  517,  518,  528,
      798,  529,  530,  519,  531,  534,  520,  522,  532,  523,
      533,  535,  536,  525,  537,   65,  538,  526,   65,   65,
      539,  527,   65,  540,  798,  541,  543,  528,  529,  530,
      546,   65,  531,  534,   65,  532,   65,  533,  535,   65,
      536,   65,  537,  538,   65,  545,   65,  544,  539,   65,

       65,  540,  541,  543,  547,  548,  549,  546,  542,  798,
      550,  551,  552,  553,  798,  554,  557,  558,  559,  798,
      560,  561,  564,  545,  562,  565,  566,  567,  568,  569,
      570,  547,  548,  549,  571,  572,  542,  550,  551,  552,
      573,  553,  554,  557,  574,  558,  559,  560,  575,  561,
      564,  562,  565,  566,  567,  576,  568,  569,  570,  577,
      578,  579,  571,  572,  580,  586,   65,  582,  573,   65,
      583,  584,  574,  585,  587,  575,  588,  798,  589,  590,
      581,  593,  576,  591,  592,  594,  577,  578,  579,  595,
      798,  596,  580,  586,  582,  597,  598,  599,  583,  584,

      585,  587,  600,  601,  588,  589,  590,  602,  581,  593,
      591,  592,  603,  594,  604,  798,  605,  595,  596,  606,
      607,  798,  608,  597,  598,  599,  609,  798,  610,  600,
      601,  611,  613,  614,  602,  615,  616,   65,  617,  603,
       65,  618,  604,  605,  619,  798,  620,  606,  607,  608,
      621,  622,  624,  625,  609,  610,  626,  627,  611,  628,
      613,  614,  629,  615,  616,  630,  617,  631,  632,  618,
      633,  634,  619,  620,  635,  798,  636,  621,  622,  637,
      624,  625,  639,  626,  627,  640,  641,  628,  642,  644,
      629,  643,  630,  645,  647,  631,  632,  633,  634,  646,

      648,  649,  635,  636,  651,  652,  637,  654,  655,  639,
      656,  657,  640,  659,  641,  660,  642,  644,  643,  661,
      662,  645,  647,  663,  664,  665,  646,  648,  649,  666,
      667,  668,  651,  652,  654,  669,  655,  656,  670,  657,
      659,  671,  672,  660,  673,  674,  675,  661,  662,  676,
      663,  664,  665,  677,  798,  678,  666,  667,  668,  679,
      680,  681,  684,  669,  682,  670,  683,  685,  671,  686,
      672,  673,  687,  674,  675,  688,  689,  676,  690,  798,
      691,  677,  678,  692,  798,  693,  679,  680,  694,  681,
      684,  682,  695,  683,  696,  685,  686,  697,  701,  687,

      698,  699,  688,  700,  689,  702,  690,  691,  703,  704,
      705,  692,  693,  706,  707,  694,  708,  710,  711,  712,
      695,  713,  696,  714,  715,  697,  701,  698,  699,  716,
      700,  717,  702,  718,  719,  703,  704,  705,  720,  721,
      706,  722,  707,  723,  708,  710,  711,  712,  724,  713,
      725,  714,  715,  726,  727,  798,  728,  716,  717,  729,
      718,  730,  719,  731,  732,  720,  721,  733,  734,  722,
      723,  735,  736,  737,  739,  724,  738,  725,  740,  741,
      743,  726,  727,  728,  742,  744,  745,  729,  730,  746,
      731,  732,  747,  748,  749,  733,  734,  750,  735,  751,

      736,  737,  739,  738,  752,  740,  753,  741,  743,  754,
      755,  742,  744,  756,  745,  757,  746,  758,  759,  747,
      748,  760,  749,  761,  750,  762,  751,  763,  764,  765,
      766,  752,  767,  753,  768,  769,  754,  755,  770,  771,
      756,  772,  773,  757,  758,  774,  759,  775,  780,  760,
      761,  776,  777,  762,  778,  763,  764,  765,  766,  767,
      779,  768,  781,  769,  782,  783,  770,  771,  772,  773,
      784,  798,  785,  774,  786,  775,  780,  787,  776,  777,
      788,  778,  789,  790,  791,  792,  793,  779,  794,  781,
      795,  782,  796,  783,  797,  798,  798,  798,  784,  785,

      798,  786,  798,  798,  787,  798,  798,  788,  798,  789,
      790,  791,  792,  793,  798,  794,  798,  795,  798,  796,
      798,  797,   61,   61,    3,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798

    } ;

static yyconst flex_int16_t yy_chk[1998] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   15,   23,   15,   25,
       23,   39,   25,   39,   41,   66,   41,   81,   66,   87,
       81,  137,   87,  212,  137,  212,   50,   25,   53,    2,

       48,    7,   16,   56,   16,   16,   16,   16,   16,  801,
       16,  800,   25,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   50,   25,   53,   48,  691,  630,
       16,   56,   16,   16,   16,   16,   16,   55,   16,   25,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   22,   26,   24,   22,   26,   24,   27,   30,   59,
       27,   30,   28,   60,   55,   28,   22,   24,   30,  625,
       32,   98,   22,   32,   22,   79,   26,   24,   79,   22,
       22,   27,   30,   24,   28,   28,   59,  621,   30,   92,
       28,   60,   92,   99,   22,   24,   30,   32,   98,   22,

       79,   22,   31,   26,   24,   31,   22,   22,   27,   30,
       24,   28,   28,   29,   92,   30,   29,   28,   33,   34,
       99,   33,   34,   29,   32,   43,   43,   79,  607,   31,
       33,   29,   35,   31,  100,   35,   44,   38,  102,   44,
       38,   92,   33,   34,  101,  590,   43,  575,   33,   35,
       35,   29,  523,   43,   43,   38,   31,  515,   33,   29,
       31,   38,  100,   44,   45,  102,   44,  514,   45,   33,
       34,   46,  101,   43,   45,   33,   51,   35,   35,   46,
       45,  473,   46,   38,   49,   49,   51,   46,   38,   46,
       47,   54,   45,   47,   52,   67,   45,  469,   67,   46,

       68,   45,   47,   68,   51,   58,   46,   45,   54,   46,
       52,   49,   49,   51,   46,   57,   46,  107,   47,   54,
       47,   58,   52,   69,   67,   70,   69,  103,   70,   47,
       57,   57,   68,   58,  108,   54,   69,   52,   71,   73,
       71,   74,   73,   57,   74,  107,   71,   76,   58,   71,
       76,   67,   75,   70,  103,   75,  110,   57,   57,   68,
       72,   73,  108,   72,   69,   76,   78,   77,   74,   78,
       77,   80,   72,   82,   80,   72,   82,  104,  105,   83,
       70,   75,   83,   80,  110,  457,   85,   78,   73,   85,
      106,  432,  426,   76,   77,   74,   84,  397,   86,   84,

       72,   86,   83,   72,  104,  105,   82,  387,   75,   88,
       89,   80,   88,   89,   78,   85,   90,  106,   84,   90,
       86,   77,   91,   88,   89,   91,   90,   93,   95,   83,
       93,   95,   94,   82,   89,   94,   96,  109,  111,   96,
      112,  113,   85,  114,   91,   84,   94,   86,  115,  361,
      116,   88,   89,  118,   90,  119,   93,   95,   96,  117,
      120,   89,  121,  123,  109,  122,  111,  112,  113,  124,
      114,   91,  117,  126,   94,  127,  115,  116,  128,  125,
      118,  129,  119,   93,   95,   96,  130,  117,  120,  125,
      121,  123,  122,  131,  132,  133,  124,  134,  129,  117,

      135,  126,  127,  135,  141,  128,  355,  125,  136,  129,
      352,  136,  138,  130,  135,  138,  125,  331,  136,  156,
      131,  132,  156,  133,  134,  129,  139,  140,  139,  140,
      138,  141,  288,  142,  139,  140,  142,  139,  140,  152,
      146,  144,  135,  146,  144,  145,  136,  143,  145,  140,
      143,  144,  168,  147,  173,  145,  147,  146,  138,  148,
      142,  149,  148,  140,  149,  143,  152,  150,  151,  148,
      150,  151,  223,  153,  149,  223,  153,  140,  170,  144,
      168,  147,  173,  145,  171,  146,  154,  142,  150,  154,
      140,  153,  211,  143,  178,  151,  155,  148,  157,  155,

      158,  157,  149,  158,  154,  170,   97,  174,  147,  157,
      155,  171,   61,  159,  160,  150,  159,  160,  161,  153,
      162,  161,  151,  162,  175,  160,  163,  158,  159,  163,
      164,  180,  154,  164,  162,  174,  181,  157,  155,  161,
      164,  165,  166,  167,  165,  166,  167,  176,  177,  179,
       42,  163,  175,  160,  158,  172,  159,  167,  180,  166,
      182,  183,  162,  181,  165,  184,  161,  185,  164,  186,
      172,  172,  187,  188,  189,  176,  177,  179,  163,  190,
      191,  192,  193,  172,  194,  167,  195,  166,  182,  183,
      198,  165,  197,  184,  185,  199,  186,  172,  172,  187,

      200,  188,  189,  201,  202,  204,  190,  191,  203,  192,
      193,  206,  194,  207,  195,  196,  196,  198,  196,  205,
      197,  208,  199,  205,  208,  213,  209,  214,  200,  209,
      201,  215,  202,  204,  210,  203,   20,  210,  206,  216,
      207,   18,  216,  196,  196,  226,  196,  205,  208,  241,
      210,  205,  213,  216,  214,   17,  217,  242,  215,  217,
      209,  219,  218,  220,  219,  218,  220,  221,  222,  224,
      221,  222,  224,  226,   12,  208,  241,  220,  210,  217,
      218,  216,  227,  225,  242,  227,  225,  209,  228,  222,
      219,  228,  229,  231,    3,  229,  221,  225,  230,  231,

      243,  230,  231,  224,  227,  220,  217,  245,  218,  247,
      228,  233,  230,    0,  233,  232,  222,  219,  232,  234,
      248,  235,  234,  221,  235,  225,  244,  243,  250,  232,
      224,  227,  233,  234,  245,  236,  247,  228,  236,  237,
      230,  238,  237,  240,  238,  239,  240,  248,  239,  252,
      235,  249,  251,  260,  244,  250,  236,  232,  246,  233,
      237,  234,  246,  239,    0,  253,  254,  255,  256,  257,
      258,  246,  261,    0,  262,  263,  252,  235,  264,  249,
      251,  260,  265,  236,  266,  267,  246,  237,  268,  271,
      246,  239,  253,  254,  255,  256,  257,  258,  246,  270,

      261,  262,  263,  269,  269,  272,  264,  273,  275,  265,
      274,  266,  267,  276,    0,  277,  268,  271,  278,  279,
      280,    0,  281,  282,  283,  285,  270,  289,  285,  286,
      269,  269,  286,  272,  290,  273,  275,  274,  291,    0,
      287,  276,  277,  287,  292,  278,  279,  292,  280,  281,
      282,    0,  283,  293,  292,  289,  293,  286,  294,    0,
      302,  294,  290,  287,    0,  291,  296,  293,  295,  296,
      297,  295,  306,  297,  299,  298,  300,  299,  298,  300,
      305,  294,  292,  305,  286,  303,  295,  302,  303,  301,
      287,  304,  301,  296,  304,  293,  298,    0,  297,  301,

      306,  307,  299,  303,  307,  299,    0,  305,  294,  304,
      308,  314,  309,  308,  295,  309,  311,  316,  310,  311,
      296,  310,  317,  298,  308,  297,  312,  301,  307,  312,
      313,  303,  319,  313,  305,  320,  310,  304,  314,  318,
      359,  321,  322,  359,  323,  316,  324,  325,  328,  317,
      311,  326,  308,  313,  327,  307,  318,  330,  333,  319,
      332,  334,  320,  335,  310,  336,  337,  318,  321,  338,
      322,  323,  339,  324,  340,  325,  328,  311,  326,  341,
      313,  327,  342,  318,  343,  330,  333,  332,  344,  334,
      345,  335,  346,  336,  337,  347,  348,  338,  349,  357,

      339,  350,  340,  351,  353,  354,  358,  341,  363,  342,
      360,  343,  364,  360,    0,  365,  344,  345,  365,    0,
      346,  366,  347,  348,  366,  372,  349,  357,  350,  373,
      351,  353,  354,  358,  367,  363,  375,  367,  368,  364,
      379,  368,  369,  365,  370,  369,  371,  370,  374,  371,
        0,  374,  376,  372,  382,  376,  373,  377,  378,  385,
      377,  378,  368,  375,  388,  380,  381,  379,  380,  381,
      365,  382,  383,  389,  384,  383,  374,  384,  386,  380,
      391,  386,  382,  390,  392,  393,  385,  376,  381,  368,
      394,  388,  377,  398,  383,  395,  396,  400,  382,  401,

      398,  389,  402,  374,  403,    0,  404,  380,  391,  405,
      390,  392,  393,  406,  376,  381,  407,  394,  408,  377,
      398,  383,  411,  395,  396,  400,  401,  398,  412,  402,
      413,  414,  403,  404,  415,  417,  405,  416,  418,  419,
      406,  420,  421,  407,  422,  427,  408,  424,  429,  411,
      430,  431,  435,  434,  436,  412,  434,  433,  413,  414,
      433,  438,  415,  417,  416,  441,  418,  419,  420,  447,
      421,  433,  422,  427,  424,  429,  434,  430,  431,  435,
      437,  436,  439,  437,  440,  439,  414,  440,  442,  438,
      443,  442,  441,  443,  437,  448,  439,  447,  440,  433,

      444,  445,  446,  434,  449,  446,  451,  452,  453,    0,
      455,  442,  458,  459,    0,  460,  446,  461,  462,    0,
      463,  464,  437,  448,  439,  465,  440,  444,  445,  467,
      470,  472,  449,  451,  452,  474,  453,  455,  442,  458,
      476,  459,  460,  477,  446,  461,  462,  463,  464,  478,
        0,  479,  480,  465,  482,  485,  467,  470,  483,  472,
      484,  486,  487,  474,  488,  491,  490,  476,  491,  492,
      493,  477,  492,  494,    0,  496,  501,  478,  479,  480,
      505,  495,  482,  485,  495,  483,  497,  484,  486,  497,
      487,  498,  488,  490,  498,  504,  500,  503,  493,  500,

      503,  494,  496,  501,  506,  507,  508,  505,  500,    0,
      509,  510,  511,  512,    0,  513,  516,  518,  519,    0,
      520,  521,  524,  504,  522,  525,  527,  528,  529,  530,
      531,  506,  507,  508,  532,  533,  500,  509,  510,  511,
      534,  512,  513,  516,  535,  518,  519,  520,  536,  521,
      524,  522,  525,  527,  528,  537,  529,  530,  531,  538,
      539,  540,  532,  533,  541,  546,  542,  543,  534,  542,
      544,  544,  535,  545,  547,  536,  548,    0,  550,  551,
      542,  554,  537,  552,  553,  555,  538,  539,  540,  556,
        0,  557,  541,  546,  543,  558,  559,  561,  544,  544,

      545,  547,  563,  564,  548,  550,  551,  565,  542,  554,
      552,  553,  566,  555,  567,    0,  568,  556,  557,  569,
      570,    0,  571,  558,  559,  561,  572,    0,  573,  563,
      564,  574,  576,  577,  565,  579,  580,  581,  583,  566,
      581,  584,  567,  568,  585,    0,  587,  569,  570,  571,
      588,  589,  591,  592,  572,  573,  593,  594,  574,  595,
      576,  577,  596,  579,  580,  597,  583,  598,  599,  584,
      600,  601,  585,  587,  602,    0,  604,  588,  589,  606,
      591,  592,  608,  593,  594,  609,  610,  595,  611,  613,
      596,  612,  597,  614,  618,  598,  599,  600,  601,  617,

      619,  620,  602,  604,  623,  624,  606,  626,  627,  608,
      628,  629,  609,  631,  610,  632,  611,  613,  612,  633,
      634,  614,  618,  635,  636,  638,  617,  619,  620,  639,
      640,  641,  623,  624,  626,  642,  627,  628,  643,  629,
      631,  644,  646,  632,  647,  648,  650,  633,  634,  651,
      635,  636,  638,  652,    0,  653,  639,  640,  641,  654,
      655,  656,  660,  642,  657,  643,  658,  661,  644,  662,
      646,  647,  663,  648,  650,  665,  667,  651,  668,    0,
      669,  652,  653,  670,    0,  672,  654,  655,  673,  656,
      660,  657,  675,  658,  676,  661,  662,  677,  682,  663,

      678,  680,  665,  681,  667,  683,  668,  669,  684,  685,
      686,  670,  672,  687,  688,  673,  689,  692,  694,  695,
      675,  696,  676,  697,  698,  677,  682,  678,  680,  699,
      681,  700,  683,  701,  702,  684,  685,  686,  704,  705,
      687,  707,  688,  708,  689,  692,  694,  695,  709,  696,
      710,  697,  698,  712,  713,    0,  714,  699,  700,  715,
      701,  716,  702,  717,  718,  704,  705,  719,  720,  707,
      708,  722,  723,  724,  726,  709,  725,  710,  727,  728,
      730,  712,  713,  714,  729,  733,  734,  715,  716,  735,
      717,  718,  736,  737,  738,  719,  720,  739,  722,  740,

      723,  724,  726,  725,  741,  727,  742,  728,  730,  743,
      744,  729,  733,  745,  734,  746,  735,  747,  748,  736,
      737,  749,  738,  750,  739,  753,  740,  754,  755,  756,
      757,  741,  759,  742,  760,  762,  743,  744,  763,  764,
      745,  765,  766,  746,  747,  767,  748,  768,  773,  749,
      750,  769,  770,  753,  771,  754,  755,  756,  757,  759,
      772,  760,  774,  762,  775,  776,  763,  764,  765,  766,
      778,    0,  779,  767,  780,  768,  773,  781,  769,  770,
      782,  771,  783,  784,  786,  788,  789,  772,  790,  774,
      791,  775,  793,  776,  794,    0,    0,    0,  778,  779,

        0,  780,    0,    0,  781,    0,    0,  782,    0,  783,
      784,  786,  788,  789,    0,  790,    0,  791,    0,  793,
        0,  794,  799,  799,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.l"
#line 2 "pddl+.l"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace VAL;
extern "C" int yywrap();

#line 1135 "pddl+.lex.yy.h"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 26 "pddl+.l"

#line 1272 "pddl+.lex.yy.h"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 799 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1925 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.l"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.l"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.l"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.l"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.l"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.l"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.l"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.l"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.l"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.l"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.l"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.l"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.l"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.l"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.l"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.l"
{return NUMERICFLUENTS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.l"
{return OBJECTFLUENTS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.l"
{return ACTIONCOSTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.l"
{return TIME;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.l"
{return PREFERENCES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.l"
{return CONSTRAINTS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.l"
{return CONSTANTS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.l"
{return PREDS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.l"
{return FUNCTIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.l"
{return CLASSES;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.l"
{return CLASS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.l"
{return TYPES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.l"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.l"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.l"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.l"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.l"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.l"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.l"
{return SUPPLYDEMAND_REQ;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.l"
{return DEFINE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.l"
{return PDDLDOMAIN;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.l"
{return ACTION;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.l"
{return PROCESS;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.l"
{return EVENT;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.l"
{return DURATIVE_ACTION;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.l"
{return DERIVED;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.l"
{return ARGS;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.l"
{return PRE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.l"
{return CONDITION;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.l"
{return START_PRE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.l"
{return END_PRE;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.l"
{return AT_START;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.l"
{return AT_END;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.l"
{return OVER_ALL;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.l"
{return EFFECTS;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.l"
{return INITIAL_EFFECT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.l"
{return FINAL_EFFECT;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.l"
{return INVARIANT;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.l"
{return DURATION;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.l"
{return CONTROL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.l"
{return AND;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.l"
{return OR;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.l"
{return EXISTS;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.l"
{return FORALL;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.l"
{return IMPLY;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.l"
{return NOT;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.l"
{return WHEN;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.l"
{return EITHER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.l"
{return PROBLEM;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.l"
{return FORDOMAIN;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.l"
{return OBJECTS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.l"
{return INITIALLY;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.l"
{return GOALS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.l"
{return EQ;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.l"
{return LENGTH;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.l"
{return SERIAL;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.l"
{return PARALLEL;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.l"
{return METRIC;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.l"
{return MINIMIZE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.l"
{return MAXIMIZE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.l"
{return ISVIOLATED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.l"
{return HASHT;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.l"
{return DURATION_VAR;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.l"
{return TOTAL_TIME;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.l"
{return TIME;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.l"
{return NUMBER;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.l"
{return INCREASE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.l"
{return DECREASE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.l"
{return SCALE_UP;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.l"
{return SCALE_DOWN;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.l"
{return ASSIGN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.l"
{return PREFERENCE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.l"
{return ALWAYS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.l"
{return SOMETIME;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.l"
{return WITHIN;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.l"
{return ATMOSTONCE;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.l"
{return SOMETIMEAFTER;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.l"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.l"
{return ALWAYSWITHIN;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.l"
{return HOLDDURING;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.l"
{return HOLDAFTER;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.l"
{return AFTER;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.l"
{return SUPPLYDEMAND;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "pddl+.l"
{return NAMETAG;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "pddl+.l"
{return PLUS;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "pddl+.l"
{return HYPHEN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "pddl+.l"
{return MUL;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 129 "pddl+.l"
{return DIV;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 130 "pddl+.l"
{return GREATER;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 131 "pddl+.l"
{return GREATEQ;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 132 "pddl+.l"
{return LESS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 133 "pddl+.l"
{return LESSEQ;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 134 "pddl+.l"
{return Q;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 135 "pddl+.l"
{return COLON;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 136 "pddl+.l"
{return DOT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 137 "pddl+.l"
{return MODULES;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 138 "pddl+.l"
{return AXIOM;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 139 "pddl+.l"
{return ARGS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 140 "pddl+.l"
{return PRE;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 141 "pddl+.l"
{return EFFECTS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 142 "pddl+.l"
{return DOMAIN_AXIOMS;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 144 "pddl+.l"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 154 "pddl+.l"
{unsigned int i;
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 167 "pddl+.l"
;
	YY_BREAK
case 120:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 168 "pddl+.l"
;
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 169 "pddl+.l"
{line_no++;};
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 171 "pddl+.l"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 172 "pddl+.l"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 174 "pddl+.l"
ECHO;
	YY_BREAK
#line 1972 "pddl+.lex.yy.h"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 799 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 799 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 798);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 174 "pddl+.l"




extern "C++" {
  int yyFlexLexer::yywrap()
{
	return 1;
};
};


